:PROPERTIES:
:ID:       ed982b37-6f8e-4b89-bb51-ac608510325e
:END:
#+title: Quicksort implementation in Python
#+author: Cash Weaver
#+date: [2022-06-30 Thu 13:57]
#+filetags: :concept:

An implementation of [[id:d7bcd831-6a3f-4885-a654-15f0b11c9966][Quicksort]] in [[id:27b0e33a-6754-40b8-99d8-46650e8626aa][Python]].

#+begin_src python :results output
from typing import List, Callable

def swap(ints: List[int], indexA: int, indexB: int) -> None:
    """Swap the values in INTS at INDEXA and INDEXB."""
    valueA = ints[indexA]
    ints[indexA] = ints[indexB]
    ints[indexB] = valueA

def partition(ints: List[int], comparator: Callable[[int, int], bool], low_index: int, high_index: int) -> int:
    """Sorts sublist into [{<= pivot}, pivot, {> than pivot}]"""
    pivot_index = high_index
    i = low_index - 1

    for j in range(low_index, high_index):
        if comparator(ints[j], ints[pivot_index]):
            i += 1
            swap(ints, i, j)
    i += 1
    swap(ints, i, pivot_index)

    return i

def quick_sort_inner(ints: List[int], comparator: Callable[[int, int], bool], low_index: int, high_index: int) -> List[int]:
    if low_index >= high_index or low_index < 0:
        return

    pivot_index = partition(ints, comparator, 0, high_index)

    quick_sort_inner(ints, comparator, 0, pivot_index - 1)
    quick_sort_inner(ints, comparator, pivot_index + 1, high_index)

    return ints

def quick_sort(ints: List[int], comparator: Callable[[int, int], bool]) -> List[int]:
       return quick_sort_inner(ints, comparator, 0, len(ints) - 1)


a = [10, 5, 8, 2, 1, 3]
print(quick_sort(a, lambda a, b: a <= b))
#+end_src

#+RESULTS:
: [1, 2, 3, 5, 8, 10]

* Anki :noexport:
:PROPERTIES:
:ANKI_DECK: Default
:END:
