:PROPERTIES:
:ID:       df6876e1-5035-4432-9b8a-19898faa4fdd
:END:
#+title: Quickselect
#+author: Cash Weaver
#+date: [2022-07-01 Fri 16:09]
#+filetags: :concept:

#+begin_quote
In computer science, quickselect is a [[id:7fbcef27-68c4-4793-8fc0-e10114318765][Selection algorithm]] to find the kth smallest element in an unordered list. It is related to the [[id:d7bcd831-6a3f-4885-a654-15f0b11c9966][Quicksort]] [[id:093fae33-1843-4271-b7cd-336553b9aac9][Sorting algorithm]].
#+end_quote

* Algorithm

To find the =k=-th smallest element in a =list=:

1. Select a =pivotIndex=
2. =Partition= the =list= around the =pivotIndex=
3. If =Partition(...)= returns =k=: =return list[k]=
4. Else if =Partition(...) < k=: Apply =Quicksort= to the left set
4. Else: Apply =Quicksort= to the right set

#+begin_src
procedure QuickSort(list, targetIndex) is
  procedure Swap(list, indexA, indexB) is
    ...

  procedure Partition(list, leftIndex, rightIndex, pivotIndex) is
    pivotValue = list[pivotIndex]
    swap list[pivotIndex] and list[rightIndex]

    i = leftIndex - 1
    for j from leftIndex to rightIndex - 1 do
      if list[j] <= pivotValue then
        i += 1
        swap list[i] and list[j]
    i += 1
    swap list[i] and list[rightIndex]
    return i

  procedure QuickSortInner(list, leftIndex, rightIndex, targetIndex) is
    pivotIndex = rightIndex
    pivotIndex = Partition(list, leftIndex, rightIndex, pivotIndex)

    if targetIndex is pivotIndex then
      return list[pivotIndex]

    if targetIndex < pivotIndex then
      return QuickSortInner(list, leftIndex, pivotIndex - 1, targetIndex)

    return QuickSortInner(list, pivotIndex + 1, rightIndex, targetIndex)

  return QuickSortInner(list, 0, len(list)-1, targetIndex)
#+end_src

* Implementation

- [[id:ffec0117-bbea-4197-865c-112e417c8f1d][Quickselect implementation in Python]]

* Anki :noexport:
:PROPERTIES:
:ANKI_DECK: Default
:END:
